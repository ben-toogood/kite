[{"/Users/alex/code/kite/web/src/index.tsx":"1","/Users/alex/code/kite/web/src/reportWebVitals.ts":"2","/Users/alex/code/kite/web/src/App.tsx":"3","/Users/alex/code/kite/web/src/Feed.tsx":"4","/Users/alex/code/kite/web/src/Login.tsx":"5","/Users/alex/code/kite/web/src/store.ts":"6","/Users/alex/code/kite/web/src/reducer.ts":"7","/Users/alex/code/kite/web/src/features/login.ts":"8","/Users/alex/code/kite/web/src/Code.tsx":"9","/Users/alex/code/kite/web/src/Upload.tsx":"10","/Users/alex/code/kite/web/src/gql-types.ts":"11"},{"size":980,"mtime":1607192319796,"results":"12","hashOfConfig":"13"},{"size":425,"mtime":1607007763980,"results":"14","hashOfConfig":"13"},{"size":528,"mtime":1607096556802,"results":"15","hashOfConfig":"13"},{"size":1069,"mtime":1607104289719,"results":"16","hashOfConfig":"13"},{"size":3435,"mtime":1607081613756,"results":"17","hashOfConfig":"13"},{"size":686,"mtime":1607014132031,"results":"18","hashOfConfig":"13"},{"size":201,"mtime":1607014705902,"results":"19","hashOfConfig":"13"},{"size":1115,"mtime":1607083085431,"results":"20","hashOfConfig":"13"},{"size":1158,"mtime":1607096577171,"results":"21","hashOfConfig":"13"},{"size":3221,"mtime":1607191057902,"results":"22","hashOfConfig":"13"},{"size":2358,"mtime":1607104141850,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"11xbidx",{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"31"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"31"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/alex/code/kite/web/src/index.tsx",[],"/Users/alex/code/kite/web/src/reportWebVitals.ts",[],["50","51"],"/Users/alex/code/kite/web/src/App.tsx",[],["52","53"],"/Users/alex/code/kite/web/src/Feed.tsx",["54"],"import Upload from \"./Upload\";\nimport { useQuery, gql } from \"@apollo/client\";\nimport { getPosts } from \"./gql-types\";\n\nconst GET_POSTS = gql`\n  query getPosts($createdBefore: Timestamp) {\n    getPosts(createdBefore: $createdBefore) {\n      imageURL\n      description\n      author {\n        firstName\n        lastName\n      }\n    }\n  }\n`;\n\nconst Feed = () => {\n  const { data } = useQuery<getPosts>(GET_POSTS);\n\n  return (\n    <div className=\"flex flex-col items-center\">\n      <div className=\"text-center\">\n        <h1 className=\"mt-6 text-4xl text-gray-700 font-dmsans\">Kite</h1>\n        <h2 className=\"text-gray-500\">Influencing everyone, everywhere..</h2>\n      </div>\n      <div className=\"items-center justify-center w-1/3\">\n        <Upload />\n      </div>\n      <div className=\"w-1/3 mt-8\">\n        {data?.getPosts?.map((p) => (\n          <div className=\"mt-3\">\n            <h3>{p?.author.firstName}</h3>\n            <img src={p?.imageURL} />\n            <p>{p?.description}</p>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Feed;\n","/Users/alex/code/kite/web/src/Login.tsx",[],"/Users/alex/code/kite/web/src/store.ts",[],"/Users/alex/code/kite/web/src/reducer.ts",[],"/Users/alex/code/kite/web/src/features/login.ts",[],"/Users/alex/code/kite/web/src/Code.tsx",[],"/Users/alex/code/kite/web/src/Upload.tsx",["55"],"import { useState } from \"react\";\nimport { gql, useMutation } from \"@apollo/client\";\nimport { createPost } from \"./gql-types\";\n\nconst validateFile = (file: File) => {\n  const validTypes = [\n    \"image/jpeg\",\n    \"image/jpg\",\n    \"image/png\",\n    \"image/gif\",\n    \"image/x-icon\",\n  ];\n  if (validTypes.indexOf(file.type) === -1) {\n    return false;\n  }\n  return true;\n};\n\nconst POSTUPLOAD = gql`\n  mutation createPost($description: String!, $image: Upload!) {\n    createPost(description: $description, image: $image) {\n      imageURL\n    }\n  }\n`;\n\nconst Upload = () => {\n  const [previewImage, setPreviewImage] = useState<string | undefined>(\n    undefined\n  );\n  const [selectedFile, setSelectedFile] = useState<File | undefined>(undefined);\n  const [description, setDescription] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [uploadFile, { loading, data }] = useMutation<createPost>(POSTUPLOAD);\n\n  const handleFiles = (files: FileList) => {\n    if (files.length > 1) {\n      setErrorMessage(\"Please only drop one file\");\n    }\n\n    if (validateFile(files[0])) {\n      const reader = new FileReader();\n      reader.readAsDataURL(files[0]);\n      reader.onload = function (e) {\n        setSelectedFile(files[0]);\n        setPreviewImage(e.target?.result as string);\n      };\n    } else {\n      setErrorMessage(\"File is not of valid type\");\n    }\n  };\n\n  const dragOver = (e: React.DragEvent) => {\n    e.preventDefault();\n  };\n\n  const dragEnter = (e: React.DragEvent) => {\n    e.preventDefault();\n  };\n\n  const dragLeave = (e: React.DragEvent) => {\n    e.preventDefault();\n  };\n\n  const fileDrop = (e: React.DragEvent) => {\n    e.preventDefault();\n    const files = e.dataTransfer.files;\n    if (files.length) {\n      handleFiles(files);\n    }\n  };\n\n  const upload = () => {\n    uploadFile({\n      variables: { description, image: selectedFile },\n    });\n  };\n\n  console.log(loading, data);\n\n  if (errorMessage) {\n    return (\n      <div>\n        <p>{errorMessage}</p>\n      </div>\n    );\n  }\n\n  if (previewImage) {\n    return (\n      <div className=\"flex flex-col items-center p-4 mt-6 border-2\">\n        <img src={previewImage} />\n        <textarea\n          id=\"about\"\n          name=\"about\"\n          rows={3}\n          onChange={(e) => setDescription(e.target.value)}\n          className=\"relative block w-full px-3 py-2 mt-4 text-gray-900 placeholder-gray-500 border border-gray-300 appearance-none focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm\"\n        ></textarea>\n        <button\n          onClick={upload}\n          className=\"relative flex justify-center w-full px-4 py-2 mt-4 font-bold text-white bg-blue-400 border border-transparent text-l group rounded-mdfocus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\"\n        >\n          Upload\n        </button>\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className=\"flex justify-center p-4 mt-6 border-4 border-dashed border-light-blue-500\"\n      onDragOver={dragOver}\n      onDragEnter={dragEnter}\n      onDragLeave={dragLeave}\n      onDrop={fileDrop}\n    >\n      <h2 className=\"text-gray-500\">Drag to upload..</h2>\n    </div>\n  );\n};\n\nexport default Upload;\n","/Users/alex/code/kite/web/src/gql-types.ts",[],{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"56","replacedBy":"60"},{"ruleId":"58","replacedBy":"61"},{"ruleId":"62","severity":1,"message":"63","line":34,"column":13,"nodeType":"64","endLine":34,"endColumn":38},{"ruleId":"62","severity":1,"message":"63","line":92,"column":9,"nodeType":"64","endLine":92,"endColumn":35},"no-native-reassign",["65"],"no-negated-in-lhs",["66"],["65"],["66"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]