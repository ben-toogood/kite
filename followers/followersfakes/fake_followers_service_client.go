// Code generated by counterfeiter. DO NOT EDIT.
package followersfakes

import (
	"context"
	"sync"

	"github.com/ben-toogood/kite/followers"
	"google.golang.org/grpc"
)

type FakeFollowersServiceClient struct {
	FollowStub        func(context.Context, *followers.FollowRequest, ...grpc.CallOption) (*followers.FollowResponse, error)
	followMutex       sync.RWMutex
	followArgsForCall []struct {
		arg1 context.Context
		arg2 *followers.FollowRequest
		arg3 []grpc.CallOption
	}
	followReturns struct {
		result1 *followers.FollowResponse
		result2 error
	}
	followReturnsOnCall map[int]struct {
		result1 *followers.FollowResponse
		result2 error
	}
	GetFollowersStub        func(context.Context, *followers.GetFollowersRequest, ...grpc.CallOption) (*followers.GetFollowersResponse, error)
	getFollowersMutex       sync.RWMutex
	getFollowersArgsForCall []struct {
		arg1 context.Context
		arg2 *followers.GetFollowersRequest
		arg3 []grpc.CallOption
	}
	getFollowersReturns struct {
		result1 *followers.GetFollowersResponse
		result2 error
	}
	getFollowersReturnsOnCall map[int]struct {
		result1 *followers.GetFollowersResponse
		result2 error
	}
	GetFollowingStub        func(context.Context, *followers.GetFollowingRequest, ...grpc.CallOption) (*followers.GetFollowingResponse, error)
	getFollowingMutex       sync.RWMutex
	getFollowingArgsForCall []struct {
		arg1 context.Context
		arg2 *followers.GetFollowingRequest
		arg3 []grpc.CallOption
	}
	getFollowingReturns struct {
		result1 *followers.GetFollowingResponse
		result2 error
	}
	getFollowingReturnsOnCall map[int]struct {
		result1 *followers.GetFollowingResponse
		result2 error
	}
	UnfollowStub        func(context.Context, *followers.UnfollowRequest, ...grpc.CallOption) (*followers.UnfollowResponse, error)
	unfollowMutex       sync.RWMutex
	unfollowArgsForCall []struct {
		arg1 context.Context
		arg2 *followers.UnfollowRequest
		arg3 []grpc.CallOption
	}
	unfollowReturns struct {
		result1 *followers.UnfollowResponse
		result2 error
	}
	unfollowReturnsOnCall map[int]struct {
		result1 *followers.UnfollowResponse
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeFollowersServiceClient) Follow(arg1 context.Context, arg2 *followers.FollowRequest, arg3 ...grpc.CallOption) (*followers.FollowResponse, error) {
	fake.followMutex.Lock()
	ret, specificReturn := fake.followReturnsOnCall[len(fake.followArgsForCall)]
	fake.followArgsForCall = append(fake.followArgsForCall, struct {
		arg1 context.Context
		arg2 *followers.FollowRequest
		arg3 []grpc.CallOption
	}{arg1, arg2, arg3})
	stub := fake.FollowStub
	fakeReturns := fake.followReturns
	fake.recordInvocation("Follow", []interface{}{arg1, arg2, arg3})
	fake.followMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeFollowersServiceClient) FollowCallCount() int {
	fake.followMutex.RLock()
	defer fake.followMutex.RUnlock()
	return len(fake.followArgsForCall)
}

func (fake *FakeFollowersServiceClient) FollowCalls(stub func(context.Context, *followers.FollowRequest, ...grpc.CallOption) (*followers.FollowResponse, error)) {
	fake.followMutex.Lock()
	defer fake.followMutex.Unlock()
	fake.FollowStub = stub
}

func (fake *FakeFollowersServiceClient) FollowArgsForCall(i int) (context.Context, *followers.FollowRequest, []grpc.CallOption) {
	fake.followMutex.RLock()
	defer fake.followMutex.RUnlock()
	argsForCall := fake.followArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeFollowersServiceClient) FollowReturns(result1 *followers.FollowResponse, result2 error) {
	fake.followMutex.Lock()
	defer fake.followMutex.Unlock()
	fake.FollowStub = nil
	fake.followReturns = struct {
		result1 *followers.FollowResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeFollowersServiceClient) FollowReturnsOnCall(i int, result1 *followers.FollowResponse, result2 error) {
	fake.followMutex.Lock()
	defer fake.followMutex.Unlock()
	fake.FollowStub = nil
	if fake.followReturnsOnCall == nil {
		fake.followReturnsOnCall = make(map[int]struct {
			result1 *followers.FollowResponse
			result2 error
		})
	}
	fake.followReturnsOnCall[i] = struct {
		result1 *followers.FollowResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeFollowersServiceClient) GetFollowers(arg1 context.Context, arg2 *followers.GetFollowersRequest, arg3 ...grpc.CallOption) (*followers.GetFollowersResponse, error) {
	fake.getFollowersMutex.Lock()
	ret, specificReturn := fake.getFollowersReturnsOnCall[len(fake.getFollowersArgsForCall)]
	fake.getFollowersArgsForCall = append(fake.getFollowersArgsForCall, struct {
		arg1 context.Context
		arg2 *followers.GetFollowersRequest
		arg3 []grpc.CallOption
	}{arg1, arg2, arg3})
	stub := fake.GetFollowersStub
	fakeReturns := fake.getFollowersReturns
	fake.recordInvocation("GetFollowers", []interface{}{arg1, arg2, arg3})
	fake.getFollowersMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeFollowersServiceClient) GetFollowersCallCount() int {
	fake.getFollowersMutex.RLock()
	defer fake.getFollowersMutex.RUnlock()
	return len(fake.getFollowersArgsForCall)
}

func (fake *FakeFollowersServiceClient) GetFollowersCalls(stub func(context.Context, *followers.GetFollowersRequest, ...grpc.CallOption) (*followers.GetFollowersResponse, error)) {
	fake.getFollowersMutex.Lock()
	defer fake.getFollowersMutex.Unlock()
	fake.GetFollowersStub = stub
}

func (fake *FakeFollowersServiceClient) GetFollowersArgsForCall(i int) (context.Context, *followers.GetFollowersRequest, []grpc.CallOption) {
	fake.getFollowersMutex.RLock()
	defer fake.getFollowersMutex.RUnlock()
	argsForCall := fake.getFollowersArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeFollowersServiceClient) GetFollowersReturns(result1 *followers.GetFollowersResponse, result2 error) {
	fake.getFollowersMutex.Lock()
	defer fake.getFollowersMutex.Unlock()
	fake.GetFollowersStub = nil
	fake.getFollowersReturns = struct {
		result1 *followers.GetFollowersResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeFollowersServiceClient) GetFollowersReturnsOnCall(i int, result1 *followers.GetFollowersResponse, result2 error) {
	fake.getFollowersMutex.Lock()
	defer fake.getFollowersMutex.Unlock()
	fake.GetFollowersStub = nil
	if fake.getFollowersReturnsOnCall == nil {
		fake.getFollowersReturnsOnCall = make(map[int]struct {
			result1 *followers.GetFollowersResponse
			result2 error
		})
	}
	fake.getFollowersReturnsOnCall[i] = struct {
		result1 *followers.GetFollowersResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeFollowersServiceClient) GetFollowing(arg1 context.Context, arg2 *followers.GetFollowingRequest, arg3 ...grpc.CallOption) (*followers.GetFollowingResponse, error) {
	fake.getFollowingMutex.Lock()
	ret, specificReturn := fake.getFollowingReturnsOnCall[len(fake.getFollowingArgsForCall)]
	fake.getFollowingArgsForCall = append(fake.getFollowingArgsForCall, struct {
		arg1 context.Context
		arg2 *followers.GetFollowingRequest
		arg3 []grpc.CallOption
	}{arg1, arg2, arg3})
	stub := fake.GetFollowingStub
	fakeReturns := fake.getFollowingReturns
	fake.recordInvocation("GetFollowing", []interface{}{arg1, arg2, arg3})
	fake.getFollowingMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeFollowersServiceClient) GetFollowingCallCount() int {
	fake.getFollowingMutex.RLock()
	defer fake.getFollowingMutex.RUnlock()
	return len(fake.getFollowingArgsForCall)
}

func (fake *FakeFollowersServiceClient) GetFollowingCalls(stub func(context.Context, *followers.GetFollowingRequest, ...grpc.CallOption) (*followers.GetFollowingResponse, error)) {
	fake.getFollowingMutex.Lock()
	defer fake.getFollowingMutex.Unlock()
	fake.GetFollowingStub = stub
}

func (fake *FakeFollowersServiceClient) GetFollowingArgsForCall(i int) (context.Context, *followers.GetFollowingRequest, []grpc.CallOption) {
	fake.getFollowingMutex.RLock()
	defer fake.getFollowingMutex.RUnlock()
	argsForCall := fake.getFollowingArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeFollowersServiceClient) GetFollowingReturns(result1 *followers.GetFollowingResponse, result2 error) {
	fake.getFollowingMutex.Lock()
	defer fake.getFollowingMutex.Unlock()
	fake.GetFollowingStub = nil
	fake.getFollowingReturns = struct {
		result1 *followers.GetFollowingResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeFollowersServiceClient) GetFollowingReturnsOnCall(i int, result1 *followers.GetFollowingResponse, result2 error) {
	fake.getFollowingMutex.Lock()
	defer fake.getFollowingMutex.Unlock()
	fake.GetFollowingStub = nil
	if fake.getFollowingReturnsOnCall == nil {
		fake.getFollowingReturnsOnCall = make(map[int]struct {
			result1 *followers.GetFollowingResponse
			result2 error
		})
	}
	fake.getFollowingReturnsOnCall[i] = struct {
		result1 *followers.GetFollowingResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeFollowersServiceClient) Unfollow(arg1 context.Context, arg2 *followers.UnfollowRequest, arg3 ...grpc.CallOption) (*followers.UnfollowResponse, error) {
	fake.unfollowMutex.Lock()
	ret, specificReturn := fake.unfollowReturnsOnCall[len(fake.unfollowArgsForCall)]
	fake.unfollowArgsForCall = append(fake.unfollowArgsForCall, struct {
		arg1 context.Context
		arg2 *followers.UnfollowRequest
		arg3 []grpc.CallOption
	}{arg1, arg2, arg3})
	stub := fake.UnfollowStub
	fakeReturns := fake.unfollowReturns
	fake.recordInvocation("Unfollow", []interface{}{arg1, arg2, arg3})
	fake.unfollowMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeFollowersServiceClient) UnfollowCallCount() int {
	fake.unfollowMutex.RLock()
	defer fake.unfollowMutex.RUnlock()
	return len(fake.unfollowArgsForCall)
}

func (fake *FakeFollowersServiceClient) UnfollowCalls(stub func(context.Context, *followers.UnfollowRequest, ...grpc.CallOption) (*followers.UnfollowResponse, error)) {
	fake.unfollowMutex.Lock()
	defer fake.unfollowMutex.Unlock()
	fake.UnfollowStub = stub
}

func (fake *FakeFollowersServiceClient) UnfollowArgsForCall(i int) (context.Context, *followers.UnfollowRequest, []grpc.CallOption) {
	fake.unfollowMutex.RLock()
	defer fake.unfollowMutex.RUnlock()
	argsForCall := fake.unfollowArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeFollowersServiceClient) UnfollowReturns(result1 *followers.UnfollowResponse, result2 error) {
	fake.unfollowMutex.Lock()
	defer fake.unfollowMutex.Unlock()
	fake.UnfollowStub = nil
	fake.unfollowReturns = struct {
		result1 *followers.UnfollowResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeFollowersServiceClient) UnfollowReturnsOnCall(i int, result1 *followers.UnfollowResponse, result2 error) {
	fake.unfollowMutex.Lock()
	defer fake.unfollowMutex.Unlock()
	fake.UnfollowStub = nil
	if fake.unfollowReturnsOnCall == nil {
		fake.unfollowReturnsOnCall = make(map[int]struct {
			result1 *followers.UnfollowResponse
			result2 error
		})
	}
	fake.unfollowReturnsOnCall[i] = struct {
		result1 *followers.UnfollowResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeFollowersServiceClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.followMutex.RLock()
	defer fake.followMutex.RUnlock()
	fake.getFollowersMutex.RLock()
	defer fake.getFollowersMutex.RUnlock()
	fake.getFollowingMutex.RLock()
	defer fake.getFollowingMutex.RUnlock()
	fake.unfollowMutex.RLock()
	defer fake.unfollowMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeFollowersServiceClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ followers.FollowersServiceClient = new(FakeFollowersServiceClient)
