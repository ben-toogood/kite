// Code generated by counterfeiter. DO NOT EDIT.
package authfakes

import (
	"context"
	"sync"

	"github.com/ben-toogood/kite/auth"
	"google.golang.org/grpc"
)

type FakeAuthServiceClient struct {
	InspectStub        func(context.Context, *auth.InspectRequest, ...grpc.CallOption) (*auth.InspectResponse, error)
	inspectMutex       sync.RWMutex
	inspectArgsForCall []struct {
		arg1 context.Context
		arg2 *auth.InspectRequest
		arg3 []grpc.CallOption
	}
	inspectReturns struct {
		result1 *auth.InspectResponse
		result2 error
	}
	inspectReturnsOnCall map[int]struct {
		result1 *auth.InspectResponse
		result2 error
	}
	LoginStub        func(context.Context, *auth.LoginRequest, ...grpc.CallOption) (*auth.LoginResponse, error)
	loginMutex       sync.RWMutex
	loginArgsForCall []struct {
		arg1 context.Context
		arg2 *auth.LoginRequest
		arg3 []grpc.CallOption
	}
	loginReturns struct {
		result1 *auth.LoginResponse
		result2 error
	}
	loginReturnsOnCall map[int]struct {
		result1 *auth.LoginResponse
		result2 error
	}
	RefreshStub        func(context.Context, *auth.RefreshRequest, ...grpc.CallOption) (*auth.RefreshResponse, error)
	refreshMutex       sync.RWMutex
	refreshArgsForCall []struct {
		arg1 context.Context
		arg2 *auth.RefreshRequest
		arg3 []grpc.CallOption
	}
	refreshReturns struct {
		result1 *auth.RefreshResponse
		result2 error
	}
	refreshReturnsOnCall map[int]struct {
		result1 *auth.RefreshResponse
		result2 error
	}
	RevokeStub        func(context.Context, *auth.RevokeRequest, ...grpc.CallOption) (*auth.RevokeResponse, error)
	revokeMutex       sync.RWMutex
	revokeArgsForCall []struct {
		arg1 context.Context
		arg2 *auth.RevokeRequest
		arg3 []grpc.CallOption
	}
	revokeReturns struct {
		result1 *auth.RevokeResponse
		result2 error
	}
	revokeReturnsOnCall map[int]struct {
		result1 *auth.RevokeResponse
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAuthServiceClient) Inspect(arg1 context.Context, arg2 *auth.InspectRequest, arg3 ...grpc.CallOption) (*auth.InspectResponse, error) {
	fake.inspectMutex.Lock()
	ret, specificReturn := fake.inspectReturnsOnCall[len(fake.inspectArgsForCall)]
	fake.inspectArgsForCall = append(fake.inspectArgsForCall, struct {
		arg1 context.Context
		arg2 *auth.InspectRequest
		arg3 []grpc.CallOption
	}{arg1, arg2, arg3})
	stub := fake.InspectStub
	fakeReturns := fake.inspectReturns
	fake.recordInvocation("Inspect", []interface{}{arg1, arg2, arg3})
	fake.inspectMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAuthServiceClient) InspectCallCount() int {
	fake.inspectMutex.RLock()
	defer fake.inspectMutex.RUnlock()
	return len(fake.inspectArgsForCall)
}

func (fake *FakeAuthServiceClient) InspectCalls(stub func(context.Context, *auth.InspectRequest, ...grpc.CallOption) (*auth.InspectResponse, error)) {
	fake.inspectMutex.Lock()
	defer fake.inspectMutex.Unlock()
	fake.InspectStub = stub
}

func (fake *FakeAuthServiceClient) InspectArgsForCall(i int) (context.Context, *auth.InspectRequest, []grpc.CallOption) {
	fake.inspectMutex.RLock()
	defer fake.inspectMutex.RUnlock()
	argsForCall := fake.inspectArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeAuthServiceClient) InspectReturns(result1 *auth.InspectResponse, result2 error) {
	fake.inspectMutex.Lock()
	defer fake.inspectMutex.Unlock()
	fake.InspectStub = nil
	fake.inspectReturns = struct {
		result1 *auth.InspectResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeAuthServiceClient) InspectReturnsOnCall(i int, result1 *auth.InspectResponse, result2 error) {
	fake.inspectMutex.Lock()
	defer fake.inspectMutex.Unlock()
	fake.InspectStub = nil
	if fake.inspectReturnsOnCall == nil {
		fake.inspectReturnsOnCall = make(map[int]struct {
			result1 *auth.InspectResponse
			result2 error
		})
	}
	fake.inspectReturnsOnCall[i] = struct {
		result1 *auth.InspectResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeAuthServiceClient) Login(arg1 context.Context, arg2 *auth.LoginRequest, arg3 ...grpc.CallOption) (*auth.LoginResponse, error) {
	fake.loginMutex.Lock()
	ret, specificReturn := fake.loginReturnsOnCall[len(fake.loginArgsForCall)]
	fake.loginArgsForCall = append(fake.loginArgsForCall, struct {
		arg1 context.Context
		arg2 *auth.LoginRequest
		arg3 []grpc.CallOption
	}{arg1, arg2, arg3})
	stub := fake.LoginStub
	fakeReturns := fake.loginReturns
	fake.recordInvocation("Login", []interface{}{arg1, arg2, arg3})
	fake.loginMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAuthServiceClient) LoginCallCount() int {
	fake.loginMutex.RLock()
	defer fake.loginMutex.RUnlock()
	return len(fake.loginArgsForCall)
}

func (fake *FakeAuthServiceClient) LoginCalls(stub func(context.Context, *auth.LoginRequest, ...grpc.CallOption) (*auth.LoginResponse, error)) {
	fake.loginMutex.Lock()
	defer fake.loginMutex.Unlock()
	fake.LoginStub = stub
}

func (fake *FakeAuthServiceClient) LoginArgsForCall(i int) (context.Context, *auth.LoginRequest, []grpc.CallOption) {
	fake.loginMutex.RLock()
	defer fake.loginMutex.RUnlock()
	argsForCall := fake.loginArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeAuthServiceClient) LoginReturns(result1 *auth.LoginResponse, result2 error) {
	fake.loginMutex.Lock()
	defer fake.loginMutex.Unlock()
	fake.LoginStub = nil
	fake.loginReturns = struct {
		result1 *auth.LoginResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeAuthServiceClient) LoginReturnsOnCall(i int, result1 *auth.LoginResponse, result2 error) {
	fake.loginMutex.Lock()
	defer fake.loginMutex.Unlock()
	fake.LoginStub = nil
	if fake.loginReturnsOnCall == nil {
		fake.loginReturnsOnCall = make(map[int]struct {
			result1 *auth.LoginResponse
			result2 error
		})
	}
	fake.loginReturnsOnCall[i] = struct {
		result1 *auth.LoginResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeAuthServiceClient) Refresh(arg1 context.Context, arg2 *auth.RefreshRequest, arg3 ...grpc.CallOption) (*auth.RefreshResponse, error) {
	fake.refreshMutex.Lock()
	ret, specificReturn := fake.refreshReturnsOnCall[len(fake.refreshArgsForCall)]
	fake.refreshArgsForCall = append(fake.refreshArgsForCall, struct {
		arg1 context.Context
		arg2 *auth.RefreshRequest
		arg3 []grpc.CallOption
	}{arg1, arg2, arg3})
	stub := fake.RefreshStub
	fakeReturns := fake.refreshReturns
	fake.recordInvocation("Refresh", []interface{}{arg1, arg2, arg3})
	fake.refreshMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAuthServiceClient) RefreshCallCount() int {
	fake.refreshMutex.RLock()
	defer fake.refreshMutex.RUnlock()
	return len(fake.refreshArgsForCall)
}

func (fake *FakeAuthServiceClient) RefreshCalls(stub func(context.Context, *auth.RefreshRequest, ...grpc.CallOption) (*auth.RefreshResponse, error)) {
	fake.refreshMutex.Lock()
	defer fake.refreshMutex.Unlock()
	fake.RefreshStub = stub
}

func (fake *FakeAuthServiceClient) RefreshArgsForCall(i int) (context.Context, *auth.RefreshRequest, []grpc.CallOption) {
	fake.refreshMutex.RLock()
	defer fake.refreshMutex.RUnlock()
	argsForCall := fake.refreshArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeAuthServiceClient) RefreshReturns(result1 *auth.RefreshResponse, result2 error) {
	fake.refreshMutex.Lock()
	defer fake.refreshMutex.Unlock()
	fake.RefreshStub = nil
	fake.refreshReturns = struct {
		result1 *auth.RefreshResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeAuthServiceClient) RefreshReturnsOnCall(i int, result1 *auth.RefreshResponse, result2 error) {
	fake.refreshMutex.Lock()
	defer fake.refreshMutex.Unlock()
	fake.RefreshStub = nil
	if fake.refreshReturnsOnCall == nil {
		fake.refreshReturnsOnCall = make(map[int]struct {
			result1 *auth.RefreshResponse
			result2 error
		})
	}
	fake.refreshReturnsOnCall[i] = struct {
		result1 *auth.RefreshResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeAuthServiceClient) Revoke(arg1 context.Context, arg2 *auth.RevokeRequest, arg3 ...grpc.CallOption) (*auth.RevokeResponse, error) {
	fake.revokeMutex.Lock()
	ret, specificReturn := fake.revokeReturnsOnCall[len(fake.revokeArgsForCall)]
	fake.revokeArgsForCall = append(fake.revokeArgsForCall, struct {
		arg1 context.Context
		arg2 *auth.RevokeRequest
		arg3 []grpc.CallOption
	}{arg1, arg2, arg3})
	stub := fake.RevokeStub
	fakeReturns := fake.revokeReturns
	fake.recordInvocation("Revoke", []interface{}{arg1, arg2, arg3})
	fake.revokeMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAuthServiceClient) RevokeCallCount() int {
	fake.revokeMutex.RLock()
	defer fake.revokeMutex.RUnlock()
	return len(fake.revokeArgsForCall)
}

func (fake *FakeAuthServiceClient) RevokeCalls(stub func(context.Context, *auth.RevokeRequest, ...grpc.CallOption) (*auth.RevokeResponse, error)) {
	fake.revokeMutex.Lock()
	defer fake.revokeMutex.Unlock()
	fake.RevokeStub = stub
}

func (fake *FakeAuthServiceClient) RevokeArgsForCall(i int) (context.Context, *auth.RevokeRequest, []grpc.CallOption) {
	fake.revokeMutex.RLock()
	defer fake.revokeMutex.RUnlock()
	argsForCall := fake.revokeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeAuthServiceClient) RevokeReturns(result1 *auth.RevokeResponse, result2 error) {
	fake.revokeMutex.Lock()
	defer fake.revokeMutex.Unlock()
	fake.RevokeStub = nil
	fake.revokeReturns = struct {
		result1 *auth.RevokeResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeAuthServiceClient) RevokeReturnsOnCall(i int, result1 *auth.RevokeResponse, result2 error) {
	fake.revokeMutex.Lock()
	defer fake.revokeMutex.Unlock()
	fake.RevokeStub = nil
	if fake.revokeReturnsOnCall == nil {
		fake.revokeReturnsOnCall = make(map[int]struct {
			result1 *auth.RevokeResponse
			result2 error
		})
	}
	fake.revokeReturnsOnCall[i] = struct {
		result1 *auth.RevokeResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeAuthServiceClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.inspectMutex.RLock()
	defer fake.inspectMutex.RUnlock()
	fake.loginMutex.RLock()
	defer fake.loginMutex.RUnlock()
	fake.refreshMutex.RLock()
	defer fake.refreshMutex.RUnlock()
	fake.revokeMutex.RLock()
	defer fake.revokeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAuthServiceClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ auth.AuthServiceClient = new(FakeAuthServiceClient)
